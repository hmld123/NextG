<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.hmld.generator.mapper.GenTableMapper">
  <!-- 业务表 -->
  <resultMap type="GenTable" id="genTableResult">
    <!-- 表对应的主键 -->
    <id property="pkTable" column="pk_table"/>
    <!-- 父表主键 -->
    <result property="parentPkTable" column="parent_pk_table"/>
    <!-- 表对应的主键 -->
    <result property="tableCode" column="table_code"/>
    <!-- 表对应的数据库名称 -->
    <result property="tableCatalog" column="table_catalog"/>
    <!-- 表对应的模式（命名空间）名称 -->
    <result property="tableSchema" column="table_schema"/>
    <!-- 表名称 -->
    <result property="tableName" column="table_name"/>
    <!-- 表注释 -->
    <result property="tableComment" column="table_comment"/>
    <!-- 表类型 -->
    <result property="tableType" column="table_type"/>
    <!-- 主键字段的所在列 -->
    <result property="pknums" column="pk_nums" jdbcType="ARRAY" typeHandler="org.apache.ibatis.type.ArrayTypeHandler"/>
    <!-- 包路径 -->
    <result property="packagePatch" column="package_patch"/>
    <!-- 模块编码 -->
    <result property="moduleCode" column="module_code"/>
    <!-- 功能编码 -->
    <result property="functionCode" column="function_code"/>
    <!-- 功能名 -->
    <result property="functionName" column="function_name"/>
    <!-- 功能作者 -->
    <result property="functionAutableNamethor" column="function_author"/>
    <!-- 生成路径 -->
    <result property="genPatch" column="gen_patch"/>
  </resultMap>
  <!-- 业务表中关联的字段表数据 -->
  <resultMap type="GenTable" id="columnListResult" extends="genTableResult">
    <collection property="columnList" notNullColumn="java.util.List" resultMap="columnResult"></collection>
  </resultMap>  
  <!-- 字段表 -->
  <resultMap type="GenTableColumn" id="columnResult">
    <!-- 字段对应的主键 -->
    <id property="pkColumn" column="pk_column"/>
    <!-- 字段对应的编码 -->
    <result property="columnCode" column="column_code"/>
    <!-- 表对应的主键 -->
    <result property="pkTable" column="pk_table"/>
    <!-- 表对应的编码 -->
    <result property="tableCode" column="table_code"/>
    <!-- 字段对应的名称 -->
    <result property="columnName" column="column_name"/>
    <!-- 字段描述 -->
    <result property="columnComment" column="column_comment"/>
    <!-- 字段对应的类型 -->
    <result property="columnType" column="column_type"/>
    <!-- 字段对应的JAVA类型 -->
    <result property="javaType" column="java_type"/>
    <!-- 字段对应的JAVA字段名 -->
    <result property="javaField" column="java_field"/>
    <!-- 是否主键（1是） -->
    <result property="isPk" column="is_pk"/>
    <!-- 是否自增（1是） -->
    <result property="isIncrement" column="is_increment"/>
    <!-- 是否必填（1是） -->
    <result property="isRequired" column="is_required"/>
    <!-- 是否为保存该字段的值（1是） -->
    <result property="isInsert" column="is_insert"/>
    <!-- 是否可编辑字段（1是） -->
    <result property="isEdit" column="is_edit"/>
    <!-- 是否列表显示字段（1是） -->
    <result property="isQuery" column="is_query"/>
    <!-- 查询方式（EQ等于、NE不等于、GT大于、LT小于、LIKE模糊、BETWEEN范围） -->
    <result property="queryType" column="query_type"/>
    <!-- 显示类型（input文本框、textarea文本域、select下拉框、checkbox复选框、radio单选框、datetime日期控件、image图片上传控件、upload文件上传控件、editor富文本控件） -->
    <result property="htmlType" column="html_type"/>
    <!-- 字典类型 -->
    <result property="dictType" column="dict_type"/>
    <!-- 排序 -->
    <result property="sort" column="sort" />
    <!-- 默认值 -->
    <result property="columnDefault" column="column_default"/>
  </resultMap>

  <!-- 查询数据库中的模式（命名空间） -->
  <select id="queryTableNameSpaceList" parameterType="GenTable" resultMap="genTableResult">
    select nspname table_schema from pg_catalog.pg_namespace 
  </select>
  <!-- 查询数据库中的表信息 -->
  <select id="queryGenTableList" parameterType="GenTable" resultMap="genTableResult">
	  select 
		  a.table_code, 
		  a.table_catalog ,
		    a.table_schema , 
		    a.table_name , 
		    a.table_comment , 
		    a.table_type,
		    b.conkey pk_nums
		from 
		(
		select 
		    c.oid table_code, 
		    t.table_catalog ,
		    t.table_schema , 
		    t.table_name , 
		    cast(obj_description(c.oid,'pg_class') as varchar) as table_comment , 
		    t.table_type 
		    from information_schema.tables t
		    left join pg_class c on c.relname = t.table_name 
		    where t.table_schema = #{tableSchema}
		) a left join 
		(
		  select ct.conkey,ct.conname,ct.conrelid from pg_constraint ct 
		  left join pg_catalog.pg_class pc on pc.oid  = ct.conrelid
		  where  ct.contype = 'p'
		) b on a.table_code = b.conrelid
  </select>
  <!-- 通过表名称查询 -->
  <select id="queryGenTableByTableName" parameterType="GenTable" resultMap="genTableResult">
    select 
      a.table_code, 
      a.table_catalog ,
        a.table_schema , 
        a.table_name , 
        a.table_comment , 
        a.table_type,
        b.conkey pk_nums
    from 
    (
    select 
        c.oid table_code, 
        t.table_catalog ,
        t.table_schema , 
        t.table_name , 
        cast(obj_description(c.oid,'pg_class') as varchar) as table_comment , 
        t.table_type 
        from information_schema.tables t
        left join pg_class c on c.relname = t.table_name 
        where t.table_schema = #{tableSchema} and t.table_name = #{tableName}
    ) a left join 
    (
      select ct.conkey,ct.conname,ct.conrelid from pg_constraint ct 
      left join pg_catalog.pg_class pc on pc.oid  = ct.conrelid
      where  ct.contype = 'p'
    ) b on a.table_code = b.conrelid
  </select>
  <!-- 查询数据库中对应的表的字段信息 -->
  <select id="qyeryGenTableColumnList" parameterType="GenTable" resultMap="columnResult">
		select 
		b.column_name ,
		b.is_nullable is_required,
		b.udt_name column_type,
		a.attnum sort,
		a.column_comment,
		b.column_default 
		from 
		(
		  select col_description(pa.attrelid,pa.attnum) as column_comment,pa.attnum,pa.attname 
		  from pg_catalog.pg_attribute pa 
		  left join pg_catalog.pg_class tb on tb.oid = pa.attrelid 
		  left join pg_catalog.pg_namespace nsp on nsp.oid = tb.relnamespace 
		  where tb.relname = #{tableName} and nsp.nspname = #{tableSchema} and attnum >0
		) a
		left join 
		( 
		  select c.column_name,c.column_default,c.is_nullable,udt_name
		  from information_schema.columns c
		  where c.table_name = #{tableName} and c.table_schema = #{tableSchema}
		) b on a.attname = b.column_name
  </select>
</mapper>